#########################################################################################
#
# Author:               Jane Curry,  jane.curry@skills-1st.co.uk
# Date:                 June 24th, 2011
# Revised:		June 28th, 2011		Added ZEN_COMMON role
#
# ZenPack to overcome issues with Administered Objects code in Core
#
# It create a new role, ZenOperator on install which has the same
#  permissions as the standard ZenUser but also has "Manage Events" permission.
#  This means users with ZenOperator role can Close / Ack events that they
#  have access to.
#  The role is deleted again when the ZenPack is removed.
#
# A second role,ZEN_COMMON is also created / removed.  This role ONLY has 
#  the ZEN_COMMON premission.
#
# Administered Objects configurations for Organizers (device classes, locations,
#  systems and groups) are not propagated to the contained devices, in the standard code.
#  This is logged as a bug in ticket 7848.
#
#  This ZenPack monkey patches (overrides) the methods in 
#   $ZENHOME/Products/ZenModel/AdministrativeRoleable.py so that propagation of
#  extra roles to contained devices DOES take place.
#
#  NOTE that deleting Organizers from the Adminstered Objects of a Group or
#   User will fail - but not horribly.  To delete the Administered Object
#   association between a User or Group and an Organizer, do the delete from
#   the Organizers DETAILS -> Administration menu - this works fine.
#
#  NOTE that you should modify the Role applied to an Administered Object
#   from the Organizers DETAILS -> Administration menu.  If you do it from
#   the User or group menu, you will need to modify the role for ALL devices,
#   not just Organizers (the panel will implement exactly what you see on that panel).
#
#  NOTE that code in this ZenPack could provide a separate Role menu, in addition
#   to the standard Administrators / Administered Objects menus.  In the future,
#   we may want different menus and actions for roles.  Currently the Roles
#   menu stuff is commented out.
#
# There is a bug currently, documented as ticket 7837, whereby deleting a user
#  group that has Administered Objects configured, does NOT properly delete
#  the Administered Object relationship and leaves your Zope Database in a 
#  nasty inconsistent state.  The manage_deleteGroups method at the end of
#  this ZenPack monkey patches the code in UserSettings so that group
#  deletion also clears up the relationships with Administerd Objects.
#
#  There are various logging hooks around the code - all are currently
#   commented out.
#
# This ZenPack has been tested with a user that has NO global role.  They are
#   added to a group which has Administered Objects configured with the
#   ZenOperator role.  The result is that the user ONLY sees those devices and
#   Organizers for which Administered Objects are configured.  The user can Ack
#   and Close events from those devices.  By default, you get to see the usual
#   View stuff for such devices but you will NOT see any graphs (for the
#   device or its components).  Graphs are deliverd by the RenderServer in
#   $ZENHOME/Products/ZenRRD/RenderServer.py.  Although the user's role is
#   augmented by the Administered Object, this is only for a device and the 
#   RenderService is not of class Device- hence no role applies (and View is
#   required).  To fix this, modify the RenderServer.py code to comment out
#   the 5 occurrences of security.declareProtected . zenhub and zopectl will
#   need to be recycled.
#   NOTE that this last kludge will not be upgrade-proof.

# This program can be used under the GNU General Public License version 2
# You can find full information here: http://www.zenoss.com/oss
#
##########################################################################


import Globals
import os.path
import os

# Imports for RenderServer
import zlib
from Products.ZenRRD.RRDUtil import fixMissingRRDs
from Products.ZenUtils.Utils import zenPath

try:
    import rrdtool
except ImportError:
    pass



import types
from AccessControl import ClassSecurityInfo
from Products.ZenModel.AdministrativeRole import AdministrativeRole
from Products.ZenModel.UserSettings  import *
from Globals import InitializeClass
from Products.ZenModel.ZenossSecurity import *
from Products.ZenWidgets import messaging

from AccessControl import Permissions
from Products.ZenModel.UserSettings import *
from Products.ZenModel.DeviceOrganizer import DeviceOrganizer
from Products.ZenModel.Location import Location
from Products.ZenModel.System import System


skinsDir = os.path.join(os.path.dirname(__file__), 'skins')
from Products.CMFCore.DirectoryView import registerDirectory
if os.path.isdir(skinsDir):
    registerDirectory(skinsDir, globals())

from Products.ZenModel.ZenPack import ZenPackBase
class ZenPack(ZenPackBase):

    def addPermissions(self, obj, permission, roles=None, acquire=0):
        if not roles:
            roles = []
        if not permission in obj.possible_permissions():
            obj.__ac_permissions__=(
                obj.__ac_permissions__+((permission,(),roles),))

        for permissionDir in obj.rolesOfPermission(permission):
            if permissionDir['selected']:
                if permissionDir['name'] not in roles:
                    roles.append(permissionDir['name'])
        obj.manage_permission(permission, roles, acquire)


# On ZenPack install, create a new role called ZenOperator with ZenUser roles plus 'Manage Events'
    def install( self, app):
        ZEN_OP_ROLE = 'ZenOperator'
        ZEN_COMMON_ROLE = 'ZenCommon'
        #logfile_i=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_i', 'a')
	dmd = self.dmd
        zport = dmd.zport
        #logfile_i.write(' In install code. zport is %s  \n ' % (zport))
	# This adds ZenOperator to the roles in http://<your zenoss>:8080/zport/manage_access
        if not ZEN_OP_ROLE in zport.__ac_roles__:
            zport.__ac_roles__ += (ZEN_OP_ROLE,)
        if not ZEN_COMMON_ROLE in zport.__ac_roles__:
            zport.__ac_roles__ += (ZEN_COMMON_ROLE,)

	# Next few lines adds the ZenOperator role to the roleManager
        rms = (dmd.getPhysicalRoot().acl_users.roleManager,
                    zport.acl_users.roleManager)
        for rm in rms:
            if not ZEN_OP_ROLE in rm.listRoleIds():
                rm.addRole(ZEN_OP_ROLE)
            if not ZEN_COMMON_ROLE in rm.listRoleIds():
                rm.addRole(ZEN_COMMON_ROLE)


# Following are standard roles same as for ZenUser
        self.addPermissions(zport, ZEN_VIEW,
            [ZEN_OP_ROLE,], 0)
        self.addPermissions(zport, ZEN_VIEW_HISTORY,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_ZPROPERTIES_VIEW,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_RUN_COMMANDS,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_DEFINE_COMMANDS_VIEW,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_MAINTENANCE_WINDOW_VIEW,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_ADMINISTRATORS_VIEW,
            [ZEN_OP_ROLE,], 1)
        self.addPermissions(zport, ZEN_COMMON,
            [ZEN_OP_ROLE,], 1)
# ZEN_MANAGE_EVENTS permission is extra to allow Ack / Close of events
        self.addPermissions(zport, ZEN_MANAGE_EVENTS,
            [ZEN_OP_ROLE,], 1)

# ZEN_COMMON permission is only permission for the ZEN_COMMON_ROLE
        self.addPermissions(zport, ZEN_COMMON,
            [ZEN_COMMON_ROLE,], 1)

        ZenPackBase.install( self, app )
        #logfile_i.close()

    def upgrade( self, app):
        ZenPackBase.upgrade( self, app )

# When ZenPack is removed, remove the ZenOperator role entirely

    def remove( self, app, leaveObjects=False):
        #logfile_r=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_r', 'a')
        ZEN_OP_ROLE = 'ZenOperator'
        ZEN_COMMON_ROLE = 'ZenCommon'
	dmd = self.dmd
        zport = dmd.zport
        rms = (dmd.getPhysicalRoot().acl_users.roleManager,
                    zport.acl_users.roleManager)
	# This removes the role from the roleManager
	# If a user has this role, it is simply removed from them
        for rm in rms:
            #logfile_r.write(' rm.listRoleIds() is %s  \n ' % (rm.listRoleIds()))
            if ZEN_OP_ROLE in rm.listRoleIds():
                rm.removeRole(ZEN_OP_ROLE)
            if ZEN_COMMON_ROLE in rm.listRoleIds():
                rm.removeRole(ZEN_COMMON_ROLE)
	#This removes the role from the manage_access list
        if ZEN_OP_ROLE in zport.__ac_roles__:
            rolelist=list(zport.__ac_roles__)
	    rolelist.remove(ZEN_OP_ROLE)
	    zport.__ac_roles__ = tuple(rolelist)

        if ZEN_COMMON_ROLE in zport.__ac_roles__:
            rolelist=list(zport.__ac_roles__)
	    rolelist.remove(ZEN_COMMON_ROLE)
	    zport.__ac_roles__ = tuple(rolelist)

        ZenPackBase.remove( self, app, leaveObjects=False )
        #logfile_r.close()


# Most of the rest of the ZenPack redefines methods in $ZENHOME/Products/ZenModel/AdministrativeRoleable.py
# Standard code does not propagate user, group and role changes to individual devices in 
#   Organizer Administered Objects (ie deviceClasses, locations, groups, systems).  This code does that.

# Code is here but commented out, to create new Role menu that basically has the same effect as the 
#  Administration / administered Objects menus.  Perhaps we want different role menus eventually......

userGroupRoletab = { 'id': 'userGroupRole',
        'name' : 'Roles',
        'action' : 'roleOverview',
        'permissions' : ( Permissions.view,)
        }

# Use the standard administeredDevices page template from Products/ZenModel/skins/zenmodel
#userGroupRoletab = { 'id': 'userGroupRole',
#        'name' : 'Roles',
#        'action' : 'administeredDevices',
#        'permissions' : ( Permissions.view,)
#        }

# Uncomment next 2 lines to get Role menu for users and groups

#UserSettings.factory_type_information[0]['actions'] += (userGroupRoletab,)
#GroupSettings.factory_type_information[0]['actions'] += (userGroupRoletab,)

#deviceOrganizerRoletab = { 'id': 'deviceOrganizerRole',
#        'name' : 'Roles',
#        'action' : 'deviceRoleManagement',
#        'permissions' : ( Permissions.view,)
#        }

# Use the standard deviceManagement page template from Products/ZenModel/skins/zenmodel
deviceOrganizerRoletab = { 'id': 'deviceOrganizerRole',
        'name' : 'Roles',
        'action' : 'deviceManagement',
        'permissions' : ( Permissions.view,)
        }

# Uncomment next 3 lines to get Role menu for Groups, Locations and Systems

#DeviceOrganizer.factory_type_information[0]['actions'] += (deviceOrganizerRoletab,)
#Location.factory_type_information[0]['actions'] += (deviceOrganizerRoletab,)
#System.factory_type_information[0]['actions'] += (deviceOrganizerRoletab,)

security = ClassSecurityInfo()

security.declareProtected(ZEN_ADMINISTRATORS_EDIT, 'manage_addRole')
def manage_addRole(self, newId=None, REQUEST=None):
    "Add a  Role to this device"

    # Note that this code actually associates users and groups with organizers and devices, NOT roles directly
    # Many of the method names are confusing in that they have "Role" in them

    #logfile_a=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_a', 'a')
    us = self.ZenUsers.getUserSettings(newId)
    # Check whether role already exists for this object. Only add if not already there.
    selfRoles = [s.id for s in self.adminRoles() ]
    if not (us.id in selfRoles):
        AdministrativeRole(us, self)
        #logfile_a.write(' In base object (including device) clause - role for object %s is %s. New us is %s \n ' % (self.id, selfRoles, us.id))
    # If the object is not a device then apply the admin role to all devices within the organizer
    if not hasattr(self,'deviceClass'):
        for dev in self.getSubDevices():
            roleNames = [r.id for r in dev.adminRoles() ]
            #logfile_a.write(' roleNames for %s are %s . New user is %s \n ' % (dev.id, roleNames, us.id))
            # Check whether role already exists for this device. Only add if not already there.
            if not (us.id in roleNames):
                AdministrativeRole(us, dev)
                #logfile_a.write(' In If - role for device %s is %s. New us is %s \n ' % (dev.id, roleNames, us.id))
    # setAdminLocalRoles() is a null function - simply "pass"
    self.setAdminLocalRoles()
    if REQUEST:
        if us:
            messaging.IMessageSender(self).sendToBrowser(
                'Role Added',
                'The %s role has been added.' % newId
            )
        return self.callZenScreen(REQUEST)
    #logfile_a.close()


security.declareProtected(ZEN_ADMINISTRATORS_EDIT, 'manage_editRoles')
def manage_editRoles(self, ids=(), role=(), level=(), REQUEST=None):
    """Edit list of admin roles.
    """

    # This code DOES actually manipulate roles
    #
    # Note that role changes should be performed from an Organizer or Device DETAILS menu - if you edit
    #  roles on a user / group page then it will apply whatever that panel shows (so just changing
    #  an Organizer will NOT propagate to individual devices)

    #logfile_e=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_e', 'a')
    if type(ids) in types.StringTypes:
        ids = [ids]
        role = [role]
        level = [level]
    #logfile_e.write(' object is %s ids is %s role is %s level is %s \n' % (self.id, ids, role, level ) )
    for i, id in enumerate(ids):
        ar = self.adminRoles._getOb(id)
        ar.update(role[i], level[i])
    # If the object is not a device then apply the admin role to all devices within the organizer
        if not hasattr(self,'deviceClass'):
            for dev in self.getSubDevices():
            # Check that this user / group has an Administered Object for this device
                subar = dev.adminRoles._getOb(id, None)
                if subar is not None:
                    #logfile_e.write('device is %s  id is %s subar is %s role is %s level is %s \n ' % (dev.id, id, subar, role[i], level[i] ) )
                    subar.update(role[i], level[i])
    # setAdminLocalRoles() is a null function - simply "pass"
    self.setAdminLocalRoles()
    if REQUEST:
        messaging.IMessageSender(self).sendToBrowser(
            'Roles Updated',
            ('The following roles have been updated: '
             '%s' % ", ".join(ids))
        )
        return self.callZenScreen(REQUEST)
    #logfile_e.close()


security.declareProtected(ZEN_ADMINISTRATORS_EDIT, 'manage_deleteRole')
def manage_deleteRole(self, delids=(), REQUEST=None):
    """Delete admin roles from this device
    """

    # Note that this code actually associates users and groups with organizers and devices, NOT roles directly
    # Many of the method names are confusing in that they have "Role" in them

    # Note that this code fails when removing Organizers called from a User / Group 
    #  panel ie from UserSettings.py  as removing devices associated with organizers breaks 
    #  the for loop at line 1043 in  UserSettings.py.  
    #  It is fine if called from an Organizers Administration dropdown menu and fine if deleting
    #  single devices or Organizers with no contained devices.

    #logfile_d=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_d', 'a')
    if type(delids) in types.StringTypes:
        delids = [delids]
	#logfile_d.write(' delids is %s \n' % (delids))
    for userid in delids:
	#logfile_d.write(' userid is %s \n' % (userid))
        ar = self.adminRoles._getOb(userid, None)
        if ar is not None: ar.delete()
        self.manage_delLocalRoles((userid,))
    # If the object is not a device then delete the admin role from all devices within the organizer
        if not hasattr(self,'deviceClass'):
            for dev in self.getSubDevices():
                #logfile_d.write('device is %s \n ' % (dev.id) )
                subar = dev.adminRoles._getOb(userid, None)
                #logfile_d.write('subar is %s \n' % (subar) )
                if subar is not None:
                    #logfile_d.write(' roleNames for %s are %s . Delete user is %s \n ' % (dev.id, subar, userid))
                    subar.delete()
                dev.manage_delLocalRoles((userid,))
    # setAdminLocalRoles() is a null function - simply "pass"
    self.setAdminLocalRoles()
    if REQUEST:
        #logfile_d.write(' In if Request clause - delids is %s \n' % (delids))
        #logfile_d.write(' In if Request clause - join delids is %s \n' % ", ".join(delids))
        if delids:
            messaging.IMessageSender(self).sendToBrowser(
                'Roles Deleted',
                ('The following roles have been deleted: '
                 '%s' % ", ".join(delids))
            )
        return self.callZenScreen(REQUEST)
    #logfile_d.close()


def setLocalRoles(self):
    """Hook for setting permissions"""
    #logfile=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile', 'a')
    #logfile.write('Entering setAdminLocalRoles \n')
    #logfile.write(' Object is %s \n' % (self.id) )
    #logfile.write('Exiting setAdminLocalRoles \n')
    #logfile.close()

    pass

# Bug exists when a User group is deleted - no check made for an Administered Object relationship so
#  half a relationship is left hanging - ticket 7837

security.declareProtected(ZEN_MANAGE_DMD, 'manage_deleteGroups')
def manage_deleteGroups(self, groupids=(), REQUEST=None):
    """ Delete a zenoss group from the system
    """
    #logfile_g=open('/usr/local/zenoss/zenoss/local/ZenPacks.skills1st.UserRoles/ZenPacks/skills1st/UserRoles/logfile_g', 'a')
    gm = self.acl_users.groupManager
    if type(groupids) in types.StringTypes:
        groupids = [groupids]
        #logfile_g.write(' Groupids is %s \n' % (groupids) )
    for groupid in groupids:

        if self._getOb(groupid):
	    us = self._getOb(groupid)
            for ar in us.adminRoles():
                #logfile_g.write(' ar is %s \n' % (ar) )
                ar.userSetting.removeRelation()
                mobj = ar.managedObject().primaryAq()
                #logfile_g.write(' mobj is %s \n' % (mobj) )
                mobj.adminRoles._delObject(ar.id)
	    self._delObject(groupid)
        try:
            #logfile_g.write(' Groupid is %s \n' % (groupid) )
            gm.removeGroup(groupid)
            self.acl_users.ZCacheable_invalidate()
        except KeyError: pass
#        except KeyError:
		#logfile_g.write(' In except KeyError  \n' )
	

    if REQUEST:
        messaging.IMessageSender(self).sendToBrowser(
            'Groups Deleted',
            "Groups were deleted: %s." % (', '.join(groupids))
        )
        return self.callZenScreen(REQUEST)
    #logfile_g.close()


# Next problem is that you don't see graphs for devivces that you are allowed to see.
#  because of permissions in $ZENHOME/ZenRRD/RenderServer.py
#  There are 5 occurrences of security.declareProtected that need View swapping to ZEN_COMMON.
#

security.declareProtected(ZEN_COMMON, 'render')
def render(self, gopts=None, start=None, end=None, drange=None,
           remoteUrl=None, width=None, ftype='PNG', getImage=True,
           graphid='', comment=None, ms=None, REQUEST=None, zenrenderRequest=None):
    """
    Render a graph and return it

    @param gopts: RRD graph creation options
    @param start: requested start of data to graph
    @param end: requested start of data to graph
    @param drange: min/max values of the graph
    @param remoteUrl: if the RRD is not here, where it lives
    @param width: size of graphic to create
    @param ftype: file type of graphic (eg PNG)
    @param getImage: return the graph or a script location
    @param graphid: (hopefully) unique identifier of a graph
    @param comment: RRD graph comment
    @param ms: a timestamp used to force IE to reload images
    @param REQUEST: URL-marshalled object containg URL options
    @return: graph or script location
    """

    gopts = zlib.decompress(urlsafe_b64decode(gopts))
    gopts = gopts.split('|')
    gopts = fixMissingRRDs(gopts)
    gopts.append('HRULE:INF#00000000')
    gopts.append('--width=%s' % width)
    if start:
        gopts.append('--start=%s' % start)
    if end:
        gopts.append('--end=%s' % end)
    drange = int(drange)
    id = self.graphId(gopts, drange, ftype)
    graph = self.getGraph(id, ftype, REQUEST)
    if not graph:
        if not os.path.exists(self.tmpdir):
            os.makedirs(self.tmpdir, 0750)
        filename = "%s/graph-%s" % (self.tmpdir,id)
        if remoteUrl:
            f = open(filename, "w")
            f.write(urllib.urlopen(remoteUrl).read())
            f.close()
        else:
            if ftype.lower()=='html':
                imgtype = 'PNG'
            else:
                imgtype = ftype
            gopts.insert(0, "--imgformat=%s" % imgtype)
            #gopts.insert(0, "--lazy")
            end = int(time.time())-300
            start = end - drange
            if comment is not None:
                gopts.insert(0, 'COMMENT:%s\\c' % comment)
            gopts.insert(0, '--end=%d' % end)
            gopts.insert(0, '--start=%d' % start)
            gopts.insert(0, filename)
            log.debug("RRD graphing options: %r", (gopts,))
            try:
                rrdtool.graph(*gopts)
            except Exception, ex:
                if ex.args[0].find('No such file or directory') > -1:
                    return None
                log.exception("Failed to generate a graph")
                log.warn(" ".join(gopts))
                return None

        self.addGraph(id, filename)
        graph = self.getGraph(id, ftype, REQUEST)

    if getImage:
        return graph
    else:
        success = bool(graph)
        ret = {'success':success}
        if success:
            ret['data'] = b64encode(graph)
        if REQUEST:
            REQUEST.RESPONSE.setHeader('Content-Type', 'text/javascript')
        else:
            zenrenderRequest.setHeader('Content-Type', 'text/javascript')
        return """Zenoss.SWOOP_CALLBACKS["%s"]('%s')""" % (graphid, json.dumps(ret))


security.declareProtected(ZEN_COMMON, 'plugin')
def plugin(self, name, REQUEST=None):
    """
    Render a custom graph and return it

    @param name: plugin name from Products/ZenRRD/plugins
    @return: graph or None
    """
    try:
        m = zenPath('Products/ZenRRD/plugins/%s.py' % name)
        log.debug( "Trying plugin %s to generate a graph..." % m )
        graph = None
        exec open(m)
        return graph
    except Exception, ex:
        log.exception("Failed generating graph from plugin %s" % name)
        raise


security.declareProtected(ZEN_COMMON, 'summary')
def summary(self, gopts):
    """
    Return summary information as a list but no graph

    @param gopts: RRD graph options
    @return: values from the graph
    """
    gopts = fixMissingRRDs(gopts)
    gopts.insert(0, '/dev/null') #no graph generated
    try:
        values = rrdtool.graph(*gopts)[2]
    except Exception, ex:
        if ex.args[0].find('No such file or directory') > -1:
            return None
        log.exception("Failed while generating summary")
        log.warn(" ".join(gopts))
        raise
    return values

security.declareProtected(ZEN_COMMON, 'fetchValues')
def fetchValues(self, paths, cf, resolution, start, end=""):
    if not end:
        end = "now"
    values = []
    try:
        for path in paths:
            values.append(rrdtool.fetch(path, cf, "-r %d" % resolution,
                "-s %s" % start,"-e %s" % end))
        return values
    except NameError:
        log.exception("It appears that the rrdtool bindings are not installed properly.")
    except Exception, ex:
        if ex.args[0].find('No such file or directory') > -1:
            return None
        log.exception("Failed while generating current values")
        raise

security.declareProtected(ZEN_COMMON, 'currentValues')
def currentValues(self, paths):
    """
    Return the latest values recorded in the RRD file
    """
    try:
        def value(p):
            v = None
            info = None
            try:
                info = rrdtool.info(p)
            except:
                log.debug('%s not found' % p)
            if info:
                last = info['last_update']
                step = info['step']
                v = rrdtool.graph('/dev/null',
                                  'DEF:x=%s:ds0:AVERAGE' % p,
                                  'VDEF:v=x,LAST',
                                  'PRINT:v:%.2lf',
                                  '--start=%d'%(last-step),
                                  '--end=%d'%last)
                v = float(v[2][0])
                if str(v) == 'nan': v = None
            return v
        return map(value, paths)

    except NameError:
        log.exception("It appears that the rrdtool bindings are not installed properly.")

    except Exception, ex:
        if ex.args[0].find('No such file or directory') > -1:
            return None
        log.exception("Failed while generating current values")
        raise




# monkey patch these methods into AdministrativeRoleable

from Products.ZenModel.AdministrativeRoleable import AdministrativeRoleable
AdministrativeRoleable.manage_addAdministrativeRole = manage_addRole
AdministrativeRoleable.manage_editAdministrativeRoles = manage_editRoles
AdministrativeRoleable.manage_deleteAdministrativeRole = manage_deleteRole
AdministrativeRoleable.setAdminLocalRoles = setLocalRoles

# monkey patch these methods into UserSettings

from Products.ZenModel.UserSettings  import UserSettingsManager
UserSettingsManager.manage_deleteGroups = manage_deleteGroups

# monkey patch these methods into RenderServer

from Products.ZenRRD.RenderServer import RenderServer
RenderServer.render = render
RenderServer.plugin = plugin
RenderServer.summary = summary
RenderServer.fetchValues = fetchValues
RenderServer.currentValues = currentValues

